#!/usr/bin/env python

# Script that parses JSON logs and prints it for humans
#
# It expect each line of the log to be one JSON object and expects each JSON
# ojbect to have as keys:
#
# - timestamp
# - loggerName
# - level
# - message
#
# It pretty-prints the message to stdout using colours. If the output is
# redirected to a file, the colours are removed.

# Colours
pure_red = "\033[0;31m"
dark_green = "\033[0;32m"
orange = "\033[0;33m"
dark_blue = "\033[0;34m"
bright_purple = "\033[0;35m"
dark_cyan = "\033[0;36m"
dull_white = "\033[0;37m"
pure_black = "\033[0;30m"
bright_red = "\033[0;91m"
light_green = "\033[0;92m"
yellow = "\033[0;93m"
bright_blue = "\033[0;94m"
magenta = "\033[0;95m"
light_cyan = "\033[0;96m"
bright_black = "\033[0;90m"
bright_white = "\033[0;97m"
cyan_back = "\033[0;46m"
purple_back = "\033[0;45m"
white_back = "\033[0;47m"
blue_back = "\033[0;44m"
orange_back = "\033[0;43m"
green_back = "\033[0;42m"
pink_back = "\033[0;41m"
grey_back = "\033[0;40m"
grey = '\033[38;4;236m'
bold = "\033[1m"
underline = "\033[4m"
italic = "\033[3m"
darken = "\033[2m"
invisible = '\033[08m'
reverse_colour = '\033[07m'
reset_colour = '\033[0m'
grey = "\x1b[90m"

import json
import sys

def stdout_redirected():
    """
    If stdout is being redirected or piped to something, return true
    else return false
    """
    return not sys.stdout.isatty()


def colorize_timestamp(timestamp):
    # if writing to a file, don't add those colors
    if stdout_redirected():
        return timestamp
    else:
        return bright_white + timestamp + reset_colour


def colorize_message(message):
    # if writing to a file, don't add those colors
    if stdout_redirected():
        return message
    else:
        return bright_blue + message + reset_colour


def colorize_level(level):
    # if writing to a file, don't add those colors
    if stdout_redirected():
        return level

    if level == "INFO":
        return bold + light_cyan + level + reset_colour
    elif level == "ERROR":
        return bold + pure_red + level + reset_colour
    elif level == "DEBUG":
        return bold + grey + level + reset_colour
    elif level == "WARN":
        return bold + orange + level + reset_colour
    else:
        return bold + level + reset_colour

for line in sys.stdin:
    if 'Exit' == line.rstrip():
        break
    try:
        data = json.loads(line)
        timestamp = data['timestamp']
        logger_name = data['loggerName']
        level = data['level']
        message = data['message']
        print("[{}] {} [{}] {}".format(colorize_timestamp(timestamp), colorize_level(level), logger_name, colorize_message(message)))
        if 'stackTrace' in data:
            print(data['stackTrace'])
    except:
        print(line)
print("-~-")

